import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import scipy
from scipy.stats import t

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data = pd.read_csv("MEN_SHOES.csv")
data['Current_Price'] = data['Current_Price'].str.replace('‚Çπ', '').str.replace(',', '').astype(float)
data['How_Many_Sold'] = data['How_Many_Sold'].str.replace(',', '').astype(int)
data.dropna(inplace=True)

# _________________________________________________________________________________________________________________________________________

# –ü–£–ù–ö–¢ 1 (–ü–æ—Å—Ç—Ä–æ–π—Ç–µ –ª–∏–Ω–µ–π–Ω—É—é –º–æ–¥–µ–ª—å, –≥–¥–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤—ã—Å—Ç—É–ø–∞—é—Ç –∫–æ–ª–∏-
# —á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∏ —Ü–µ–Ω–∞ (–≤–º–µ—Å—Ç–µ —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º), –∑–∞–≤–∏—Å–∏-
# –º–æ–π ‚Äì —Ä–µ–π—Ç–∏–Ω–≥.)

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Ç—Ä–∏—Ü—É
x1 = np.array(data['How_Many_Sold']).reshape(-1, 1)
x2 = np.array(data['Current_Price']).reshape(-1, 1)
y = np.array(data['RATING'])

# –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –µ–¥–∏–Ω–∏—Ü –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ (–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã)
X = np.hstack((np.ones((x1.shape[0], 1)), x1, x2))

# –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ú–ù–ö
XTX = X.T @ X  # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã X –Ω–∞ —Å–∞–º—É —Å–µ–±—è
XTX_inv = np.linalg.inv(XTX)  # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é
XTY = X.T @ y  # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã X –Ω–∞ –≤–µ–∫—Ç–æ—Ä y

B = XTX_inv @ XTY  # –í—ã—á–∏—Å–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤

# _________________________________________________________________________________________________________________________________________

# –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –¥–∏—Å–ø–µ—Ä—Å–∏—é
residuals = y - X @ B  # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
residual_variance = np.sum(residuals**2) / (len(y) - X.shape[1])  # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –¥–∏—Å–ø–µ—Ä—Å–∏—é

# _________________________________________________________________________________________________________________________________________
# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤

# –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –º–æ–¥–µ–ª–∏
SE = np.sqrt(np.diag(XTX_inv) * residual_variance)

# –ó–∞–¥–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
alpha = 0.01

# –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã
df = len(y) - X.shape[1]

# –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ t –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
t_value = t.ppf(1 - alpha / 2, df)

# –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –º–æ–¥–µ–ª–∏
CI_lower = B - t_value * SE
CI_upper = B + t_value * SE

# _________________________________________________________________________________________________________________________________________

# –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏
total_variance = np.sum((y - np.mean(y))**2)
r2 = 1 - residual_variance / total_variance


# _________________________________________________________________________________________________________________________________________
# –ì–†–ê–§–ò–ö–ò(–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∞ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –æ–±—É–≤–∏)

fig, axs = plt.subplots(1, 2, figsize=(20, 6))

# –ü–µ—Ä–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
axs[0].scatter(data['How_Many_Sold'], data['RATING'], label='–î–∞–Ω–Ω—ã–µ')
x_line = np.linspace(0, data['How_Many_Sold'].max(), 100)
y_line = B[0] + B[1] * x_line + B[2] * data['Current_Price'].mean()
axs[0].plot(x_line, y_line, color='red', label='–õ–∏–Ω–µ–π–Ω–∞—è –º–æ–¥–µ–ª—å')
axs[0].set_xlabel('How_Many_Sold')
axs[0].set_ylabel('RATING')
axs[0].legend()

filtered_data = data[data['How_Many_Sold'] <= 1000]

# –í—Ç–æ—Ä–æ–π –≥—Ä–∞—Ñ–∏–∫
axs[1].scatter(filtered_data['How_Many_Sold'], filtered_data['RATING'], label='–î–∞–Ω–Ω—ã–µ')
x_line = np.linspace(0, filtered_data['How_Many_Sold'].max(), 100)
y_line = B[0] + B[1] * x_line + B[2] * filtered_data['Current_Price'].mean()
axs[1].plot(x_line, y_line, color='red', label='–õ–∏–Ω–µ–π–Ω–∞—è –º–æ–¥–µ–ª—å')
axs[1].set_xlabel('How_Many_Sold')
axs[1].set_ylabel('RATING')
axs[1].legend()

plt.show()

# _________________________________________________________________________________________________________________________________________

print('–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–æ–¥–µ–ª–∏:')
print('  –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞:', B[0])
print('  How_Many_Sold:', B[1])
print('  Current_Price:', B[2])
print('\n–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –º–æ–¥–µ–ª–∏:')
print('  SE[–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞]:', SE[0])
print('  SE[How_Many_Sold]:', SE[1])
print('  SE[Current_Price]:', SE[2])
print('\n–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –º–æ–¥–µ–ª–∏ (—É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ 95%):')
print('  –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞: [{:.10f}, {:.10f}]'.format(CI_lower[0], CI_upper[0]))
print('  How_Many_Sold: [{:.10f}, {:.10f}]'.format(CI_lower[1], CI_upper[1]))
print('  Current_Price (—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞): [{:.10f}, {:.10f}]'.format(CI_lower[2], CI_upper[2]))
print('\n–û—Å—Ç–∞—Ç–æ—á–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è:', residual_variance)
print('–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏ (R^2):', r2)

grouped_data = data.groupby('Brand_Name')
sales_sum = grouped_data['How_Many_Sold'].sum()
max_sales = sales_sum.max()
max_brand = sales_sum.idxmax()
print('\n–ë—Ä–µ–Ω–¥ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –æ–±—É–≤–∏:', max_brand)

# _________________________________________________________________________________________________________________________________________
# –ü–£–ù–ö–¢ 2 (–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è)

# –ß–µ–º –±–æ–ª—å—à–µ –ø—Ä–æ–¥–∞–∂–∏, —Ç–µ–º –±–æ–ª—å—à–µ —Ä–µ–π—Ç–∏–Ω–≥

# –ì–∏–ø–æ—Ç–µ–∑–∞ H0: Œ≤1 = 0 (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥)
# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞ H1: Œ≤1 ‚â† 0 (–º–µ–∂–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏–Ω–µ–π–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å)

t_crit = t.ppf(1 - alpha/2, df)

t_stat = B[1] / SE[1]

print("\n–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥")
if np.abs(t_stat) > t_crit:
    print("–ì–∏–ø–æ—Ç–µ–∑–∞ H0 –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è –≤ –ø–æ–ª—å–∑—É –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –≥–∏–ø–æ—Ç–µ–∑—ã H1.")
else:
    print("–ì–∏–ø–æ—Ç–µ–∑–∞ H0 –Ω–µ –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è.")

# _________________________________________________________________________________________________________________________________________

# –†–µ–π—Ç–∏–Ω–≥ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ü–µ–Ω—ã

# –ì–∏–ø–æ—Ç–µ–∑–∞ H0: Œ≤2 = 0 (—Ü–µ–Ω–∞ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥)
# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞ H1: Œ≤2 ‚â† 0 (–∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞)

t_stat = B[2] / SE[2]

print("\n–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ: —Ü–µ–Ω–∞ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥")
if np.abs(t_stat) > t_crit:
    print("–ì–∏–ø–æ—Ç–µ–∑–∞ H0 –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è –≤ –ø–æ–ª—å–∑—É –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –≥–∏–ø–æ—Ç–µ–∑—ã H1.")
else:
    print("–ì–∏–ø–æ—Ç–µ–∑–∞ H0 –Ω–µ –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è.")

# _________________________________________________________________________________________________________________________________________

# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥–∏–ø–æ—Ç–µ–∑—É ùêª0 –æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω—É–ª—é –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏ —Ü–µ–Ω–µ –∏
# –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø—Ä–æ—Ç–∏–≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã ùêª1 = ùêª0


# –ì–∏–ø–æ—Ç–µ–∑–∞ H0: Œ≤1 = Œ≤2 = 0 (–æ–±–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –ø—Ä–∏ —Ü–µ–Ω–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Ä–∞–≤–Ω—ã –Ω—É–ª—é)
# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞ H1: Œ≤1 ‚â† 0 –∏–ª–∏ Œ≤2 ‚â† 0 (—Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –Ω–µ —Ä–∞–≤–µ–Ω –Ω—É–ª—é)

# –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø—Ä–∏ –Ω—É–ª–µ–≤–æ–π –º–æ–¥–µ–ª–∏ (–±–µ–∑ —É—á—ë—Ç–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)
# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –∑–∞–≤–∏—Å–∏–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–º–µ–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ –≤—Å–µ—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏—è—Ö
RSS0 = np.sum((y - np.mean(y))**2)

# –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –º–æ–¥–µ–ª–∏ (—Å —É—á—ë—Ç–æ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)
RSS1 = np.sum((y - X @ B)**2)

# –í—ã—á–∏—Å–ª—è–µ–º F-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
F_stat = ((RSS0 - RSS1) / (X.shape[1] - 1)) / (RSS1 / (len(y) - X.shape[1]))

# –í—ã—á–∏—Å–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ F-—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
F_crit = scipy.stats.f.ppf(1 - alpha, X.shape[1] - 1, len(y) - X.shape[1])

print("\n–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ: –æ–±–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –ø—Ä–∏ —Ü–µ–Ω–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Ä–∞–≤–Ω—ã –Ω—É–ª—é")
if F_stat > F_crit:
    print("–ì–∏–ø–æ—Ç–µ–∑–∞ H0 –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è –≤ –ø–æ–ª—å–∑—É –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –≥–∏–ø–æ—Ç–µ–∑—ã H1.")
else:
    print("–ì–∏–ø–æ—Ç–µ–∑–∞ H0 –Ω–µ –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è.")
